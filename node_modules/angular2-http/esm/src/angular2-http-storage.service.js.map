{"version":3,"sources":["../../../src/angular2-http-storage.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAO,MAAO,yBAAA,CAA0B;AAEjD;IAAA;IAGA,CAAC;IAAD,mBAAC;AAAD,CAHA,AAGC,IAAA;;AAED;IAAA;IAGA,CAAC;IAAD,oBAAC;AAAD,CAHA,AAGC,IAAA;;AAED,MAAM,CAAC,IAAM,oBAAA,GAAsC;IAC/C,IAAI,EAAE,MAAA;IACN,GAAG,EAAE,CAAA;CACR,CAAC;AAEF,MAAM,CAAC,IAAM,qBAAA,GAAwC;IACjD,GAAG,EAAE,OAAA;IACL,MAAM,EAAE,oBAAA;CACX,CAAC;AAGF;IAEI,wBAAoB,MAAsB;QAAtB,WAAM,GAAN,MAAM,CAAgB;QACtC,MAAM,GAAG,MAAM,IAAI,qBAAqB,CAAC;IAC7C,CAAC;IAEM,iCAAQ,GAAf;QACI,IAAI,KAAK,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEpD,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE5C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACR,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACnD,CAAC;QACL,CAAC;QAED,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;IACvB,CAAC;IAEM,iCAAQ,GAAf,UAAgB,KAAa;QACzB,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAE/C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QAC5E,CAAC;IACL,CAAC;IAEM,oCAAW,GAAlB;QACI,EAAE,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1C,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IASL,qBAAC;AAAD,CA7CA,AA6CC;;AAPM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,EAF6F,CAE7F,CAAC","file":"angular2-http-storage.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cookie } from 'ng2-cookies/ng2-cookies';\n\nexport class CookieConfig {\n    public name: string;\n    public ttl: number;\n}\n\nexport class StorageConfig {\n    public key: string;\n    public cookie: CookieConfig;\n}\n\nexport const CookieConfigDefaults : CookieConfig = {\n    name: 'auth',\n    ttl: 1\n};\n\nexport const StorageConfigDefaults : StorageConfig = {\n    key: 'token',\n    cookie: CookieConfigDefaults\n};\n\n\nexport class StorageService {\n\n    constructor(private config?: StorageConfig) {        \n        config = config || StorageConfigDefaults;\n    }\n\n    public getToken() : string {\n        let token = sessionStorage.getItem(this.config.key);\n\n        if (!token && this.config.cookie) {\n            token = Cookie.get(this.config.cookie.name);\n\n            if (token) {\n                sessionStorage.setItem(this.config.key, token);\n            }\n        }\n\n        return token || '';\n    }\n\n    public setToken(token: string) : void {\n        sessionStorage.setItem(this.config.key, token);\n\n        if (this.config.cookie) {\n            Cookie.set(this.config.cookie.name, token, this.config.cookie.ttl || 1);\n        }\n    }\n\n    public removeToken() : void {\n        if (sessionStorage.getItem(this.config.key)) {\n            sessionStorage.removeItem(this.config.key);\n        }\n        \n        if (this.config.cookie && Cookie.get(this.config.cookie.name)) {\n            Cookie.delete(this.config.cookie.name);\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StorageConfig, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}