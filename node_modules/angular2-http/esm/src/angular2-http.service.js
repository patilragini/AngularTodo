var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { Http, ConnectionBackend, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
import { StorageService } from './angular2-http-storage.service';
import { RedirectService } from './angular2-http-redirect.service';
var JwtHttp = (function (_super) {
    __extends(JwtHttp, _super);
    function JwtHttp(backend, defaultOptions, storage, redirect) {
        var _this = _super.call(this, backend, defaultOptions) || this;
        _this.storage = storage;
        _this.redirect = redirect;
        return _this;
    }
    JwtHttp.prototype.request = function (url, options) {
        if (typeof url === "string") {
            return this.get(url, options); // Recursion: transform url from String to Request
        }
        return this.requestWithToken(url, options, this.storage.getToken());
    };
    JwtHttp.prototype.get = function (url, options) {
        return _super.prototype.get.call(this, url, options);
    };
    JwtHttp.prototype.post = function (url, body, options) {
        return _super.prototype.post.call(this, url, body, options);
    };
    JwtHttp.prototype.put = function (url, body, options) {
        return _super.prototype.put.call(this, url, body, options);
    };
    JwtHttp.prototype.delete = function (url, options) {
        return _super.prototype.delete.call(this, url, options);
    };
    JwtHttp.prototype.patch = function (url, body, options) {
        return this.patch(url, body, options);
    };
    JwtHttp.prototype.head = function (url, options) {
        return _super.prototype.head.call(this, url, options);
    };
    JwtHttp.prototype.options = function (url, options) {
        return _super.prototype.options.call(this, url, options);
    };
    JwtHttp.prototype.requestWithToken = function (request, options, token) {
        var _this = this;
        if (token) {
            request.headers.set("Authorization", token);
        }
        return _super.prototype.request.call(this, request, options)
            .catch(function (error) {
            if (error.status === 401) {
                _this.redirect.save();
            }
            return Observable.throw(error);
        });
    };
    return JwtHttp;
}(Http));
export { JwtHttp };
JwtHttp.decorators = [
    { type: Injectable },
];
/** @nocollapse */
JwtHttp.ctorParameters = function () { return [
    { type: ConnectionBackend, },
    { type: RequestOptions, },
    { type: StorageService, },
    { type: RedirectService, },
]; };
//# sourceMappingURL=angular2-http.service.js.map