{"version":3,"sources":["../../../src/angular2-http.service.ts"],"names":[],"mappings":"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","file":"angular2-http.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, ConnectionBackend, Request, RequestOptions, RequestOptionsArgs, Response, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\n\nimport { StorageService } from './angular2-http-storage.service';\nimport { RedirectService } from './angular2-http-redirect.service';\n\n\nexport class JwtHttp extends Http {\n\n    constructor(\n        backend: ConnectionBackend, defaultOptions: RequestOptions, \n        private storage: StorageService, \n        private redirect: RedirectService) {\n        super(backend, defaultOptions);\n    }\n\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        if (typeof url === \"string\") {\n            return this.get(url, options); // Recursion: transform url from String to Request\n        }\n\n        return this.requestWithToken(url as Request, options, this.storage.getToken());\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.get(url, options);\n    }\n    \n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return super.post(url, body, options);\n    }\n    \n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return super.put(url, body, options);\n    }\n    \n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.delete(url, options);\n    }\n    \n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.patch(url, body, options);\n    }\n    \n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.head(url, options);\n    }\n    \n    options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return super.options(url, options);\n    }\n\n    private requestWithToken(request: Request, options?: RequestOptionsArgs, token?: string): Observable<Response> {\n        if (token) {\n            request.headers.set(\"Authorization\", token);\n        }\n\n        return super\n            .request(request, options)\n            .catch((error: any) => {\n                if (error.status === 401) {\n                    this.redirect.save();\n                }\n\n                return Observable.throw(error);\n            });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n{type: StorageService, },\n{type: RedirectService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}