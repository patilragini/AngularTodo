{"version":3,"sources":["../../../src/angular2-http-redirect.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,QAAA,EAAS,MAAO,iBAAA,CAAkB;AAC3C,OAAO,EAAE,MAAA,EAAO,MAAO,iBAAA,CAAkB;AAEzC;IAAA;IAEA,CAAC;IAAD,qBAAC;AAAD,CAFA,AAEC,IAAA;;AAED,MAAM,CAAC,IAAM,sBAAA,GAAyC;IAClD,WAAW,EAAE,QAAA;CAChB,CAAC;AAGF;IAMI,yBACY,QAAkB,EAAU,MAAc,EAC1C,MAAuB;QADvB,aAAQ,GAAR,QAAQ,CAAU;QAAU,WAAM,GAAN,MAAM,CAAQ;QAC1C,WAAM,GAAN,MAAM,CAAiB;QAN3B,4BAAuB,GAAG;YAC9B,GAAG,EAAE,GAAG;SACX,CAAC;QAKE,MAAM,GAAG,MAAM,IAAI,sBAAsB,CAAC;IAC9C,CAAC;IAEM,iCAAO,GAAd;QACI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,8BAAI,GAAX;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,iBAAiB,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;YAC3F,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;IAUL,sBAAC;AAAD,CA/BA,AA+BC;;AATM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,cAAc,GAAG;CACvB,EAJ6F,CAI7F,CAAC","file":"angular2-http-redirect.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router } from '@angular/router';\n\nexport class RedirectConfig {\n    pathToLogin: string;\n}\n\nexport const RedirectConfigDefaults: RedirectConfig = {\n    pathToLogin: '/login'    \n};\n\n\nexport class RedirectService {\n    \n    private redirectToUrlAfterLogin = {\n        url: '/'\n    };\n    \n    constructor(\n        private location: Location, private router: Router, \n        private config?: RedirectConfig) {\n        config = config || RedirectConfigDefaults;\n    }\n\n    public restore() : void {\n        this.router.navigate([this.redirectToUrlAfterLogin.url]);\n    }\n\n    public save() {\n        if (this.config.pathToLogin.toLocaleLowerCase() !== this.location.path().toLocaleLowerCase()) {\n            this.redirectToUrlAfterLogin.url = this.location.path();\n            this.router.navigate([this.config.pathToLogin]);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Location, },\n{type: Router, },\n{type: RedirectConfig, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}