var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { NgModule } from '@angular/core';
import { HttpModule, RequestOptions, BaseRequestOptions, Http, XHRBackend } from '@angular/http';
import { StorageService, StorageConfig, CookieConfig } from './angular2-http-storage.service';
import { RedirectService, RedirectConfig } from './angular2-http-redirect.service';
import { AuthService } from './angular2-http-auth.service';
import { JwtHttp } from './angular2-http.service';
var DefaultRequestOptions = (function (_super) {
    __extends(DefaultRequestOptions, _super);
    function DefaultRequestOptions() {
        var _this = _super.call(this) || this;
        _this.headers.set('Content-Type', 'application/json');
        return _this;
    }
    return DefaultRequestOptions;
}(BaseRequestOptions));
export { DefaultRequestOptions };
export function jwtHttpFactory(backend, defaultOptions, storage, redirect) {
    return new JwtHttp(backend, defaultOptions, storage, redirect);
}
var Http2Module = (function () {
    function Http2Module() {
    }
    Http2Module.forRoot = function (cookie, storage, redirect) {
        return {
            ngModule: Http2Module,
            providers: [
                StorageService,
                RedirectService,
                AuthService,
                { provide: CookieConfig, useValue: cookie },
                { provide: StorageConfig, useValue: storage },
                { provide: RedirectConfig, useValue: redirect },
                { provide: RequestOptions, useClass: DefaultRequestOptions },
                {
                    provide: Http,
                    useFactory: jwtHttpFactory,
                    deps: [XHRBackend, RequestOptions, StorageService, RedirectService]
                }
            ]
        };
    };
    ;
    return Http2Module;
}());
export { Http2Module };
Http2Module.decorators = [
    { type: NgModule, args: [{
                imports: [HttpModule],
                providers: [
                    StorageService,
                    RedirectService,
                    AuthService,
                    JwtHttp
                ]
            },] },
];
/** @nocollapse */
Http2Module.ctorParameters = function () { return []; };
//# sourceMappingURL=angular2-http.module.js.map