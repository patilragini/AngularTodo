{"version":3,"sources":["../../../src/angular2-http-auth.service.ts"],"names":[],"mappings":"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","file":"angular2-http-auth.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { StorageService } from './angular2-http-storage.service';\n\nclass JwtHelper {\n\n    static CHARS: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\n    private static urlBase64Decode(str: string): string {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n        switch (output.length % 4) {\n            case 0: { break; }\n            case 2: { output += '=='; break; }\n            case 3: { output += '='; break; }\n            default: {\n                throw 'Illegal base64url string!';\n            }\n        }\n\n        return this.b64DecodeUnicode(output);\n    }\n\n    private static b64DecodeUnicode(str: any) : string {\n        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), (c: any) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    private static b64decode(str: string): string {\n        let output: string = '';\n        \n        str = String(str).replace(/=+$/, '');\n        \n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n        \n        for (\n            // initialize result and counters\n            let bc: number = 0, bs: any, buffer: any, idx: number = 0;\n            // get next character\n            buffer = str.charAt(idx++);\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = this.CHARS.indexOf(buffer);\n        }\n        \n        return output;\n    }\n\n    public static decodeToken(token: string): any {\n        let parts = token.split('.');\n\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n        \n        let decoded = this.urlBase64Decode(parts[1]);\n        \n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n        \n        return JSON.parse(decoded);\n    }    \n}\n\n\nexport class AuthService {\n    \n    constructor(private storage: StorageService) {\n\n    }\n\n    public setToken(token: string) : void {\n        if (!this.isTokenExpired(token)) {\n            this.storage.setToken(token);\n        }\n    }\n\n    public removeToken() : void {\n        this.storage.removeToken();\n    }\n\n    public isLoggedIn() : boolean {\n        return this.storage.getToken() && !this.isTokenExpired();\n    }\n\n    public getUsername() : string {\n        return this.getTokenProperty('unique_name');\n    }\n\n    public getTokenProperty(property:string) : any {\n        if (!this.isLoggedIn()) {\n            return undefined;\n        }        \n\n        return this.decodeToken()[property];\n    }\n\n    public hasClaim(claimType:string, claimValue:string) : boolean {\n        let value = this.getTokenProperty(claimType);\n\n        if (Array.isArray(value)) {\n            return value.indexOf(claimValue) >= 0;\n        } else {\n            return value === claimValue;\n        }\n    }\n        \n    private decodeToken(token?: string) : any {\n        return JwtHelper.decodeToken(token || this.storage.getToken());\n    }\n    \n    private isTokenExpired(token?: string): boolean {\n        let date = this.getTokenExpirationDate(token);    \n        \n        if (!date) {\n            return false;\n        }\n\n        // Token expired?\n        return date.valueOf() <= new Date().valueOf();\n    }\n\n    private getTokenExpirationDate(token?: string): Date {\n        let decoded = this.decodeToken(token);\n\n        if (!decoded.exp) {\n            return null;\n        }\n\n        let date = new Date(0);\n        date.setUTCDate(decoded.exp);\n        return date;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StorageService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}